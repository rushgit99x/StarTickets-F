@model StarTickets.Models.ViewModels.PaymentIndexViewModel
@{
    ViewData["Title"] = "Payment Management";
}

<style>
    :root {
        --primary-color: #3b82f6;
        --primary-dark: #2563eb;
        --success-color: #10b981;
        --warning-color: #f59e0b;
        --danger-color: #ef4444;
        --info-color: #06b6d4;
        --secondary-color: #6b7280;
        --background-light: #f8fafc;
        --border-light: #e2e8f0;
        --text-dark: #1f2937;
        --text-muted: #6b7280;
        --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
        --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
        --border-radius: 8px;
        --border-radius-lg: 12px;
    }

    .payment-management {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 2rem 0;
    }

    .container {
        max-width: 1400px;
    }

    .page-header {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: var(--border-radius-lg);
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: var(--shadow-md);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .page-title {
        color: var(--text-dark);
        font-weight: 700;
        font-size: 2.5rem;
        margin: 0;
        text-align: center;
        background: linear-gradient(135deg, #667eea, #764ba2);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .filters-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: var(--border-radius-lg);
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: var(--shadow-md);
        border: 1px solid rgba(255, 255, 255, 0.2);
        transition: all 0.3s ease;
    }

        .filters-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px -8px rgb(0 0 0 / 0.15);
        }

    .form-label {
        font-weight: 600;
        color: var(--text-dark);
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .form-control, .form-select {
        border: 2px solid var(--border-light);
        border-radius: var(--border-radius);
        padding: 0.75rem 1rem;
        font-size: 0.95rem;
        transition: all 0.3s ease;
        background: white;
    }

        .form-control:focus, .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
            outline: none;
        }

    .btn {
        padding: 0.75rem 1.5rem;
        font-weight: 600;
        border-radius: var(--border-radius);
        transition: all 0.3s ease;
        border: none;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
        color: white;
        box-shadow: var(--shadow-sm);
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
            background: linear-gradient(135deg, var(--primary-dark), #1d4ed8);
        }

    .btn-secondary {
        background: linear-gradient(135deg, var(--secondary-color), #4b5563);
        color: white;
    }

        .btn-secondary:hover {
            transform: translateY(-2px);
            background: linear-gradient(135deg, #4b5563, #374151);
        }

    .btn-danger {
        background: linear-gradient(135deg, var(--danger-color), #dc2626);
        color: white;
    }

        .btn-danger:hover {
            transform: translateY(-2px);
            background: linear-gradient(135deg, #dc2626, #b91c1c);
        }

    .data-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: var(--border-radius-lg);
        box-shadow: var(--shadow-md);
        border: 1px solid rgba(255, 255, 255, 0.2);
        overflow: hidden;
    }

    .data-card-header {
        background: linear-gradient(135deg, #f8fafc, #e2e8f0);
        padding: 1.5rem 2rem;
        border-bottom: 2px solid var(--border-light);
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 1rem;
    }

    .stat-item {
        text-align: center;
        padding: 1rem;
        background: rgba(255, 255, 255, 0.8);
        border-radius: var(--border-radius);
        border: 1px solid var(--border-light);
    }

    .stat-label {
        font-size: 0.8rem;
        color: var(--text-muted);
        text-transform: uppercase;
        letter-spacing: 0.5px;
        font-weight: 600;
    }

    .stat-value {
        font-size: 1.2rem;
        font-weight: 700;
        color: var(--text-dark);
        margin-top: 0.25rem;
    }

    .table-container {
        max-height: 600px;
        overflow-y: auto;
    }

    .table {
        margin: 0;
    }

        .table thead th {
            background: linear-gradient(135deg, #f1f5f9, #e2e8f0);
            color: var(--text-dark);
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            font-size: 0.8rem;
            padding: 1rem;
            border: none;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .table tbody tr {
            transition: all 0.2s ease;
        }

            .table tbody tr:hover {
                background: rgba(59, 130, 246, 0.05);
                transform: scale(1.01);
            }

        .table tbody td {
            padding: 1rem;
            border-color: var(--border-light);
            vertical-align: middle;
        }

    .badge {
        padding: 0.5rem 0.75rem;
        border-radius: 20px;
        font-weight: 600;
        font-size: 0.75rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .bg-success {
        background: linear-gradient(135deg, var(--success-color), #059669) !important;
        color: white;
    }

    .bg-warning {
        background: linear-gradient(135deg, var(--warning-color), #d97706) !important;
        color: white;
    }

    .bg-danger {
        background: linear-gradient(135deg, var(--danger-color), #dc2626) !important;
        color: white;
    }

    .bg-info {
        background: linear-gradient(135deg, var(--info-color), #0891b2) !important;
        color: white;
    }

    .bg-secondary {
        background: linear-gradient(135deg, var(--secondary-color), #4b5563) !important;
        color: white;
    }

    .transaction-ref {
        font-weight: 600;
        color: var(--text-dark);
    }

    .transaction-id {
        font-size: 0.8rem;
        color: var(--text-muted);
        font-family: 'Courier New', monospace;
    }

    .customer-name {
        font-weight: 600;
        color: var(--text-dark);
    }

    .customer-email {
        font-size: 0.85rem;
        color: var(--text-muted);
    }

    .amount {
        font-weight: 700;
        font-size: 1.1rem;
        color: var(--success-color);
    }

    .no-data {
        padding: 3rem;
        text-align: center;
        color: var(--text-muted);
        font-style: italic;
    }

    @@media (max-width: 768px) {
        .page-title

    {
        font-size: 2rem;
    }

    .filters-card, .page-header {
        padding: 1rem;
    }

    .btn {
        padding: 0.6rem 1rem;
        font-size: 0.8rem;
    }

    .stats-grid {
        grid-template-columns: 1fr;
    }

    }
</style>

<div class="payment-management">
    <div class="container">
        <!-- Page Header -->
        <div class="page-header">
            <h1 class="page-title">Payment Management</h1>
        </div>

        <!-- Filters -->
        <form method="get" asp-action="Index" class="filters-card">
            <div class="row g-3">
                <div class="col-lg-2 col-md-4 col-sm-6">
                    <label class="form-label">From Date</label>
                    <input type="date" class="form-control" name="FromDate"
                           value="@Model.Filters.FromDate?.ToString("yyyy-MM-dd")" />
                </div>
                <div class="col-lg-2 col-md-4 col-sm-6">
                    <label class="form-label">To Date</label>
                    <input type="date" class="form-control" name="ToDate"
                           value="@Model.Filters.ToDate?.ToString("yyyy-MM-dd")" />
                </div>
                <div class="col-lg-2 col-md-4 col-sm-6">
                    <label class="form-label">Status</label>
                    <select class="form-select" name="PaymentStatus">
                        <option value="">Completed (default)</option>
                        @foreach (var status in Enum.GetValues(typeof(StarTickets.Models.PaymentStatus)))
                        {
                            <option value="@((int)status)"
                                    selected="@(Model.Filters.PaymentStatus.HasValue && (int)Model.Filters.PaymentStatus.Value == (int)status ? "selected" : null)">
                                @status
                            </option>
                        }
                    </select>
                </div>
                <div class="col-lg-2 col-md-4 col-sm-6">
                    <label class="form-label">Method</label>
                    <input type="text" class="form-control" name="PaymentMethod"
                           value="@Model.Filters.PaymentMethod" placeholder="Visa/Mastercard..." />
                </div>
                <div class="col-lg-2 col-md-4 col-sm-6">
                    <label class="form-label">Customer</label>
                    <input type="text" class="form-control" name="CustomerQuery"
                           value="@Model.Filters.CustomerQuery" placeholder="Name/Email/Ref" />
                </div>
                <div class="col-lg-2 col-md-4 col-sm-6">
                    <label class="form-label">Event</label>
                    <select class="form-select" name="EventId">
                        <option value="">All Events</option>
                        @foreach (var ev in (IEnumerable<dynamic>)ViewBag.Events)
                        {
                            <option value="@ev.EventId"
                                    selected="@(Model.Filters.EventId.HasValue && Model.Filters.EventId.Value == (int)ev.EventId ? "selected" : null)">
                                @ev.EventName
                            </option>
                        }
                    </select>
                </div>
            </div>

            <div class="mt-4 d-flex flex-wrap gap-2">
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-search me-1"></i> Apply Filters
                </button>
                <a class="btn btn-secondary" asp-action="Index">
                    <i class="fas fa-undo me-1"></i> Reset
                </a>
                <a class="btn btn-danger" asp-action="ExportPdf"
                   asp-route-FromDate="@Model.Filters.FromDate?.ToString("yyyy-MM-dd")"
                   asp-route-ToDate="@Model.Filters.ToDate?.ToString("yyyy-MM-dd")"
                   asp-route-PaymentStatus="@(Model.Filters.PaymentStatus.HasValue ? ((int)Model.Filters.PaymentStatus.Value).ToString() : null)"
                   asp-route-PaymentMethod="@Model.Filters.PaymentMethod"
                   asp-route-CustomerQuery="@Model.Filters.CustomerQuery"
                   asp-route-EventId="@Model.Filters.EventId">
                    <i class="fas fa-download me-1"></i> Download PDF
                </a>
            </div>
        </form>

        <!-- Data Table -->
        <div class="data-card">
            <div class="data-card-header">
                <div class="row align-items-center">
                    <div class="col-md-4">
                        <div class="stat-item">
                            <div class="stat-label">Total Transactions</div>
                            <div class="stat-value">@Model.TotalCount.ToString("N0")</div>
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="stats-grid">
                            <div class="stat-item">
                                <div class="stat-label">Total Gross</div>
                                <div class="stat-value">@Model.TotalGross.ToString("C")</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-label">Total Discounts</div>
                                <div class="stat-value">@Model.TotalDiscounts.ToString("C")</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-label">Total Net</div>
                                <div class="stat-value">@Model.TotalNet.ToString("C")</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="table-container">
                <table class="table table-striped table-hover align-middle mb-0">
                    <thead>
                        <tr>
                            <th><i class="fas fa-calendar me-1"></i> Date</th>
                            <th><i class="fas fa-receipt me-1"></i> Booking Ref</th>
                            <th><i class="fas fa-user me-1"></i> Customer</th>
                            <th><i class="fas fa-calendar-alt me-1"></i> Event</th>
                            <th><i class="fas fa-credit-card me-1"></i> Method</th>
                            <th><i class="fas fa-info-circle me-1"></i> Status</th>
                            <th class="text-end"><i class="fas fa-dollar-sign me-1"></i> Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Transactions.Count == 0)
                        {
                            <tr>
                                <td colspan="7" class="no-data">
                                    <i class="fas fa-search fa-3x mb-3 text-muted"></i>
                                    <div>No transactions found matching your criteria.</div>
                                </td>
                            </tr>
                        }
                        else
                        {
                            foreach (var t in Model.Transactions)
                            {
                                <tr>
                                    <td>
                                        <div>@t.BookingDate.ToString("MMM dd, yyyy")</div>
                                        <small class="text-muted">@t.BookingDate.ToString("HH:mm")</small>
                                    </td>
                                    <td>
                                        <div class="transaction-ref">@t.BookingReference</div>
                                        @if (!string.IsNullOrEmpty(t.PaymentTransactionId))
                                        {
                                            <div class="transaction-id">Txn: @t.PaymentTransactionId</div>
                                        }
                                    </td>
                                    <td>
                                        <div class="customer-name">@t.CustomerName</div>
                                        <div class="customer-email">@t.CustomerEmail</div>
                                    </td>
                                    <td>@t.EventName</td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(t.PaymentMethod))
                                        {
                                            <span class="badge bg-light text-dark">@t.PaymentMethod</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge bg-@GetBadge(t.PaymentStatus)">
                                            <i class="fas fa-@GetStatusIcon(t.PaymentStatus) me-1"></i>
                                            @t.PaymentStatus
                                        </span>
                                    </td>
                                    <td class="text-end">
                                        <span class="amount">@t.FinalAmount.ToString("C")</span>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@functions {
    private string GetBadge(StarTickets.Models.PaymentStatus status)
    {
        return status switch
        {
            StarTickets.Models.PaymentStatus.Completed => "success",
            StarTickets.Models.PaymentStatus.Pending => "warning",
            StarTickets.Models.PaymentStatus.Failed => "danger",
            StarTickets.Models.PaymentStatus.Refunded => "info",
            _ => "secondary"
        };
    }

    private string GetStatusIcon(StarTickets.Models.PaymentStatus status)
    {
        return status switch
        {
            StarTickets.Models.PaymentStatus.Completed => "check-circle",
            StarTickets.Models.PaymentStatus.Pending => "clock",
            StarTickets.Models.PaymentStatus.Failed => "times-circle",
            StarTickets.Models.PaymentStatus.Refunded => "undo",
            _ => "question-circle"
        };
    }
}