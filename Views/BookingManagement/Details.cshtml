@model StarTickets.Models.ViewModels.BookingDetailsViewModel
@{
    ViewData["Title"] = "Booking Details";
    Layout = "~/Views/Shared/CustomLayouts/_AdminDashboard.cshtml";
}

<div class="content-area">
    <!-- Enhanced Header with Navigation -->
    <div class="d-flex align-items-center justify-content-between mb-4">
        <div class="d-flex align-items-center">
            <a class="btn btn-outline-secondary me-3 back-button" href="@Url.Action("Index")" title="Go back to booking list">
                <i class="fas fa-arrow-left"></i> Back to List
            </a>
            <h1 class="page-title m-0">
                <i class="fas fa-receipt"></i>
                Booking Details
                <span class="booking-ref">@Model.Booking.BookingReference</span>
            </h1>
        </div>

        <!-- Action Buttons -->
        <div class="detail-actions">
            <button class="btn btn-outline-primary me-2" onclick="window.print()" title="Print booking details">
                <i class="fas fa-print"></i> Print
            </button>
        </div>
    </div>

    <!-- Alert Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show booking-alert" role="alert">
            <i class="fas fa-check-circle me-2"></i>
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show booking-alert" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    @if (TempData["InfoMessage"] != null)
    {
        <div class="alert alert-info alert-dismissible fade show booking-alert" role="alert">
            <i class="fas fa-info-circle me-2"></i>
            @TempData["InfoMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Main Content -->
    <div class="row g-4">
        <!-- Left Column - Main Details -->
        <div class="col-lg-8">
            <!-- Booking Status Card -->
            <div class="dashboard-card status-card mb-4">
                <div class="card-header d-flex align-items-center justify-content-between">
                    <h3 class="card-title mb-0">
                        <i class="fas fa-chart-line"></i> Booking Status
                    </h3>
                    <div class="status-indicators">
                        @if (Model.Booking.Status == StarTickets.Models.BookingStatus.Active)
                        {
                            <span class="badge bg-success status-badge">
                                <i class="fas fa-check-circle"></i> Active
                            </span>
                        }
                        else
                        {
                            <span class="badge bg-danger status-badge">
                                <i class="fas fa-times-circle"></i> Cancelled
                            </span>
                        }
                        <span class="badge bg-secondary payment-badge ms-2">
                            <i class="fas fa-credit-card"></i> @Model.Booking.PaymentStatus
                        </span>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="info-item">
                                <label>Booking Reference</label>
                                <div class="info-value booking-ref-display">@Model.Booking.BookingReference</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-item">
                                <label>Booking Date</label>
                                <div class="info-value">@Model.Booking.BookingDate.ToString("MMM dd, yyyy h:mm tt")</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Customer Information -->
            <div class="dashboard-card customer-card mb-4">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-user"></i> Customer Information
                    </h3>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="info-item">
                                <label>Full Name</label>
                                <div class="info-value customer-name">
                                    @(Model.Booking.Customer != null ? ($"{Model.Booking.Customer.FirstName} {Model.Booking.Customer.LastName}") : "Not Available")
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-item">
                                <label>Email Address</label>
                                <div class="info-value customer-email">
                                    @if (!string.IsNullOrEmpty(Model.Booking.Customer?.Email))
                                    {
                                        <a href="mailto:@Model.Booking.Customer.Email">@Model.Booking.Customer.Email</a>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Not provided</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Event Information -->
            <div class="dashboard-card event-card mb-4">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-calendar-alt"></i> Event Information
                    </h3>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="info-item">
                                <label>Event Name</label>
                                <div class="info-value event-name">@Model.Event.EventName</div>
                            </div>
                            <div class="info-item mt-3">
                                <label>Venue</label>
                                <div class="info-value venue-name">
                                    <i class="fas fa-map-marker-alt text-primary me-2"></i>
                                    @(Model.Venue?.VenueName ?? "Venue not specified")
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="info-item">
                                <label>Event Date & Time</label>
                                <div class="info-value event-datetime">
                                    <div class="date-display">
                                        <i class="fas fa-calendar me-2"></i>
                                        @Model.Event.EventDate.ToString("MMM dd, yyyy")
                                    </div>
                                    <div class="time-display">
                                        <i class="fas fa-clock me-2"></i>
                                        @Model.Event.EventDate.ToString("h:mm tt")
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Ticket Details -->
            <div class="dashboard-card tickets-card">
                <div class="card-header d-flex align-items-center justify-content-between">
                    <h3 class="card-title">
                        <i class="fas fa-ticket-alt"></i> Ticket Breakdown
                    </h3>
                    <span class="total-tickets-badge">
                        @Model.BookingDetails.Sum(d => d.Quantity) Tickets
                    </span>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0 ticket-details-table">
                            <thead>
                                <tr>
                                    <th><i class="fas fa-tags me-2"></i>Category</th>
                                    <th class="text-center"><i class="fas fa-sort-numeric-up me-2"></i>Quantity</th>
                                    <th class="text-end"><i class="fas fa-dollar-sign me-2"></i>Unit Price</th>
                                    <th class="text-end"><i class="fas fa-calculator me-2"></i>Subtotal</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var d in Model.BookingDetails)
                                {
                                    <tr class="ticket-row" data-category="@d.TicketCategory?.CategoryName">
                                        <td>
                                            <div class="category-info">
                                                <span class="category-name">@d.TicketCategory?.CategoryName</span>
                                            </div>
                                        </td>
                                        <td class="text-center">
                                            <span class="quantity-badge">@d.Quantity</span>
                                        </td>
                                        <td class="text-end price-cell">@d.UnitPrice.ToString("C")</td>
                                        <td class="text-end total-cell">
                                            <strong>@d.TotalPrice.ToString("C")</strong>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Column - Summary & Actions -->
        <div class="col-lg-4">
            <!-- Payment Summary -->
            <div class="dashboard-card summary-card sticky-top">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-calculator"></i> Payment Summary
                    </h3>
                </div>
                <div class="card-body">
                    <div class="summary-breakdown">
                        <div class="summary-row">
                            <span class="summary-label">Subtotal</span>
                            <span class="summary-value">@Model.Booking.TotalAmount.ToString("C")</span>
                        </div>
                        <div class="summary-row discount-row">
                            <span class="summary-label">
                                <i class="fas fa-percent text-success me-1"></i>Discount
                            </span>
                            <span class="summary-value text-success">-@Model.Booking.DiscountAmount.ToString("C")</span>
                        </div>
                        <hr class="summary-divider" />
                        <div class="summary-row total-row">
                            <span class="summary-label">Final Total</span>
                            <span class="summary-value total-amount">@Model.Booking.FinalAmount.ToString("C")</span>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="action-section mt-4">
                        @if (Model.CanCancel)
                        {
                            <div class="cancel-section">
                                <button class="btn btn-outline-danger w-100 mb-3" data-bs-toggle="collapse" data-bs-target="#cancelForm">
                                    <i class="fas fa-times"></i> Cancel Booking
                                </button>

                                <div class="collapse" id="cancelForm">
                                    <form method="post" action="@Url.Action("Cancel", new { id = Model.Booking.BookingId })" class="cancel-form">
                                        @Html.AntiForgeryToken()
                                        <div class="mb-3">
                                            <label class="form-label">Cancellation Reason</label>
                                            <textarea name="reason" class="form-control" rows="3" placeholder="Please provide a reason for cancellation (optional)"></textarea>
                                        </div>
                                        <div class="d-grid gap-2">
                                            <button type="submit" class="btn btn-danger confirm-cancel">
                                                <i class="fas fa-exclamation-triangle me-2"></i>
                                                Confirm Cancellation
                                            </button>
                                            <button type="button" class="btn btn-secondary" data-bs-toggle="collapse" data-bs-target="#cancelForm">
                                                Cancel
                                            </button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle me-2"></i>
                                This booking cannot be cancelled.
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="dashboard-card quick-actions-card mt-4">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-bolt"></i> Quick Actions
                    </h3>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <form method="post" action="@Url.Action("Delete", "BookingManagement", new { id = Model.Booking.BookingId })" onsubmit="return confirmDelete();">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-outline-danger w-100">
                                <i class="fas fa-trash me-2"></i>
                                Delete Booking
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Custom Styles for Details Page -->
<style>
    /* Booking Reference Styling */
    .booking-ref {
        color: #3b82f6;
        font-weight: 600;
        font-size: 1.5rem;
        background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(139, 92, 246, 0.1));
        padding: 0.25rem 0.75rem;
        border-radius: 8px;
        margin-left: 1rem;
    }

    .booking-ref-display {
        font-family: 'Courier New', monospace;
        font-size: 1.2rem;
        font-weight: bold;
        color: #1e293b;
        background: #f8fafc;
        padding: 0.5rem;
        border-radius: 6px;
        border-left: 4px solid #3b82f6;
    }

    /* Status Cards */
    .status-card .card-header {
        background: linear-gradient(135deg, #f8fafc, #e2e8f0);
        border-bottom: 2px solid #3b82f6;
    }

    .status-badge, .payment-badge {
        font-size: 0.8rem;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-weight: 600;
    }

    /* Info Items */
    .info-item {
        margin-bottom: 1rem;
    }

        .info-item label {
            font-size: 0.85rem;
            font-weight: 600;
            color: #64748b;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 0.25rem;
            display: block;
        }

    .info-value {
        font-size: 1rem;
        color: #1e293b;
        font-weight: 500;
    }

    .customer-name, .event-name {
        font-size: 1.1rem;
        font-weight: 600;
        color: #1e293b;
    }

    .venue-name {
        color: #059669;
    }

    .event-datetime .date-display,
    .event-datetime .time-display {
        margin-bottom: 0.25rem;
        color: #1e293b;
        font-weight: 500;
    }

    /* Ticket Details Table */
    .ticket-details-table th {
        background: linear-gradient(135deg, #1e293b, #334155);
        color: white;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        font-size: 0.8rem;
        padding: 1rem 1.25rem;
        border: none;
    }

    .ticket-row {
        transition: all 0.3s ease;
    }

        .ticket-row:hover {
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.05), rgba(139, 92, 246, 0.05));
            transform: translateX(5px);
        }

    .category-info {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .category-name {
        font-weight: 600;
        color: #1e293b;
    }

    .quantity-badge {
        background: linear-gradient(135deg, #3b82f6, #1d4ed8);
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 12px;
        font-weight: 600;
        font-size: 0.9rem;
    }

    .price-cell, .total-cell {
        font-weight: 600;
        color: #059669;
    }

    .total-tickets-badge {
        background: linear-gradient(135deg, #10b981, #059669);
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 600;
    }

    /* Summary Card */
    .summary-card {
        top: 2rem;
    }

    .summary-breakdown {
        background: linear-gradient(135deg, #f8fafc, #f1f5f9);
        padding: 1.5rem;
        border-radius: 12px;
        border: 1px solid #e2e8f0;
    }

    .summary-row {
        display: flex;
        justify-content: between;
        align-items: center;
        margin-bottom: 0.75rem;
    }

        .summary-row:last-child {
            margin-bottom: 0;
        }

    .summary-label {
        font-weight: 500;
        color: #64748b;
    }

    .summary-value {
        font-weight: 600;
        color: #1e293b;
        margin-left: auto;
    }

    .total-row {
        padding-top: 0.5rem;
    }

        .total-row .summary-label,
        .total-row .summary-value {
            font-size: 1.2rem;
            font-weight: 700;
        }

    .total-amount {
        color: #059669 !important;
        font-size: 1.4rem !important;
    }

    .summary-divider {
        border-color: #3b82f6;
        border-width: 2px;
        margin: 1rem 0;
    }

    /* Action Section */
    .action-section {
        border-top: 1px solid #e2e8f0;
        padding-top: 1.5rem;
    }

    .cancel-form {
        background: #fef2f2;
        padding: 1rem;
        border-radius: 8px;
        border: 1px solid #fecaca;
    }

    .confirm-cancel {
        background: linear-gradient(135deg, #ef4444, #dc2626);
        border: none;
        font-weight: 600;
    }

    /* Quick Actions */
    .quick-actions-card .btn {
        text-align: left;
        font-weight: 500;
    }

    /* Detail Actions */
    .detail-actions .btn {
        border-radius: 8px;
        font-weight: 600;
    }

    .back-button {
        transition: all 0.3s ease;
    }

        .back-button:hover {
            transform: translateX(-3px);
        }

    /* Alert Enhancements */
    .booking-alert {
        border-radius: 12px;
        border: none;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .detail-actions

    {
        margin-top: 1rem;
        width: 100%;
    }

    .detail-actions .btn {
        flex: 1;
    }

    .booking-ref {
        display: block;
        margin-left: 0;
        margin-top: 0.5rem;
        text-align: center;
    }

    .summary-card {
        position: static;
        top: auto;
    }

    }

    /* Print Styles */
    @@media print {
        .detail-actions, .action-section, .quick-actions-card

    {
        display: none !important;
    }

    .dashboard-card {
        box-shadow: none;
        border: 1px solid #ddd;
    }

    }
</style>

<!-- Enhanced JavaScript for Details Page -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize enhanced details functionality
        initializeDetailsPage();
    });

    function initializeDetailsPage() {
        // Add smooth animations
        animateDetailsLoad();

        // Setup confirmation dialogs
        setupConfirmationDialogs();

        // Initialize tooltips
        initializeTooltips();

        // Setup keyboard shortcuts
        setupDetailsKeyboardShortcuts();
    }

    function animateDetailsLoad() {
        const cards = document.querySelectorAll('.dashboard-card');
        cards.forEach((card, index) => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(30px)';

            setTimeout(() => {
                card.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, index * 100);
        });
    }

    function setupConfirmationDialogs() {
        const cancelButton = document.querySelector('.confirm-cancel');
        if (cancelButton) {
            cancelButton.addEventListener('click', function(e) {
                e.preventDefault();

                if (confirm('Are you sure you want to cancel this booking? This action cannot be undone.')) {
                    // Show loading state
                    cancelButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Processing...';
                    cancelButton.disabled = true;

                    // Submit form after brief delay
                    setTimeout(() => {
                        this.closest('form').submit();
                    }, 500);
                }
            });
        }
    }

    function confirmDelete() {
        return confirm('This will permanently delete the booking and its tickets. Continue?');
    }

    function setupDetailsKeyboardShortcuts() {
        document.addEventListener('keydown', function(e) {
            // Escape - Go back
            if (e.key === 'Escape') {
                const backButton = document.querySelector('.back-button');
                if (backButton) {
                    backButton.click();
                }
            }

            // Ctrl/Cmd + P - Print
            if ((e.ctrlKey || e.metaKey) && e.key === 'p') {
                e.preventDefault();
                window.print();
            }
        });
    }

    // Action Functions

    function sendConfirmationEmail() {
        const customerEmail = '@Model.Booking.Customer?.Email';
        if (!customerEmail) {
            showNotification('No customer email available', 'error');
            return;
        }

        showNotification(`Sending confirmation email to ${customerEmail}...`, 'info');

        // Simulate email sending
        setTimeout(() => {
            showNotification('Confirmation email sent successfully!', 'success');
        }, 2000);
    }

    function generateTickets() {
        const bookingRef = '@Model.Booking.BookingReference';
        showNotification(`Generating tickets for ${bookingRef}...`, 'info');

        // Simulate ticket generation
        setTimeout(() => {
            showNotification('Tickets generated successfully!', 'success');
        }, 1500);
    }

    function copyBookingLink() {
        const bookingUrl = window.location.href;

        if (navigator.clipboard) {
            navigator.clipboard.writeText(bookingUrl).then(() => {
                showNotification('Booking link copied to clipboard!', 'success');
            });
        } else {
            // Fallback for older browsers
            const textArea = document.createElement('textarea');
            textArea.value = bookingUrl;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            showNotification('Booking link copied to clipboard!', 'success');
        }
    }

    function initializeTooltips() {
        const tooltipElements = document.querySelectorAll('[title]');

        tooltipElements.forEach(element => {
            const title = element.getAttribute('title');
            element.removeAttribute('title');

            element.addEventListener('mouseenter', function() {
                showTooltip(this, title);
            });

            element.addEventListener('mouseleave', function() {
                hideTooltip();
            });
        });
    }

    function showTooltip(element, text) {
        const tooltip = document.createElement('div');
        tooltip.className = 'custom-tooltip';
        tooltip.textContent = text;
        tooltip.style.cssText = `
            position: absolute;
            background: #1e293b;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-size: 0.85rem;
            z-index: 1000;
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
            white-space: nowrap;
        `;

        document.body.appendChild(tooltip);

        const rect = element.getBoundingClientRect();
        tooltip.style.left = `${rect.left + (rect.width / 2) - (tooltip.offsetWidth / 2)}px`;
        tooltip.style.top = `${rect.top - tooltip.offsetHeight - 8}px`;

        requestAnimationFrame(() => {
            tooltip.style.opacity = '1';
        });

        element._tooltip = tooltip;
    }

    function hideTooltip() {
        const tooltips = document.querySelectorAll('.custom-tooltip');
        tooltips.forEach(tooltip => {
            tooltip.style.opacity = '0';
            setTimeout(() => tooltip.remove(), 300);
        });
    }

    function showNotification(message, type = 'info', duration = 4000) {
        let container = document.querySelector('.notification-container');

        if (!container) {
            container = document.createElement('div');
            container.className = 'notification-container';
            container.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 9999;
                max-width: 400px;
            `;
            document.body.appendChild(container);
        }

        const notification = document.createElement('div');
        notification.className = `alert alert-${type} notification-toast`;
        notification.style.cssText = `
            margin-bottom: 10px;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            border: none;
        `;

        const iconMap = {
            success: 'check-circle',
            error: 'exclamation-triangle',
            warning: 'exclamation-circle',
            info: 'info-circle'
        };

        notification.innerHTML = `
            <div class="d-flex align-items-center">
                <i class="fas fa-${iconMap[type]} me-2"></i>
                <span>${message}</span>
                <button type="button" class="btn-close ms-auto" onclick="this.parentElement.parentElement.remove()"></button>
            </div>
        `;

        container.appendChild(notification);

        requestAnimationFrame(() => {
            notification.style.opacity = '1';
            notification.style.transform = 'translateX(0)';
        });

        setTimeout(() => {
            notification.style.opacity = '0';
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => notification.remove(), 300);
        }, duration);
    }
</script>